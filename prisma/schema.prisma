// https://www.prisma.io/docs/concepts/components/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id Int @id @default(autoincrement())

  // Discord snowflake IDs are 8 bytes in size (e.g. `uint64`). The Discord API returns them as a
  // string, so we will store them as a string in the database as well in order to keep things
  // simple.
  discordID String @unique

  // We allow the end-user to customize their username. (It does not necessary have to match their
  // Discord username.)
  username String @unique

  // Normalization is needed to prevent having a user of "Alice" and "Alic√®", for example.
  normalizedUsername String @unique

  // Needed to ban malicious users, since Discord accounts are free.
  lastIP String

  dateTimeCreated   DateTime @default(now())
  dateTimeLastLogin DateTime @default(now())

  userStreaks UserStreak[]
}

model UserStreak {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userID], references: [id])
  userID Int

  // Matches the `PlayerType` enum in "PlayerType.ts".
  character Int

  // Matches the `Goal` enum in "Goal.ts".
  goal String

  streakNumCurrent Int
  streakNumBest    Int

  @@unique([userID, character, goal])
}
